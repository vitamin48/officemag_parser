"""
–®–∞–≥ 2. –°–±–æ—Ä —Å—Å—ã–ª–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π.
"""
import os
import time
import datetime
import json
import random
from playwright.sync_api import sync_playwright, TimeoutError
from tqdm import tqdm

# --- –ù–ê–°–¢–†–û–ô–ö–ò –°–ö–†–ò–ü–¢–ê ---
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
INPUT_CATALOGS_FILE = os.path.join("in", "catalogs.txt")
INPUT_BAD_BRANDS_FILE = os.path.join("in", "bad_brand.txt")
OUTPUT_GOOD_FILE = os.path.join("out", "links_from_catalogs.csv")
OUTPUT_BAD_FILE = os.path.join("out", "links_from_catalogs_bad_brand.csv")

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
LOGIN_URL = "https://www.officemag.ru/auth/"
USER_LOGIN = "forvk180420@gmail.com"
USER_PASSWORD = "forvk180420"

# –û–±—â–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BASE_URL = "https://www.officemag.ru"
CSV_HEADERS = ['–ê—Ä—Ç–∏–∫—É–ª', '–ë—Ä–µ–Ω–¥', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–°—Å—ã–ª–∫–∞']
CSV_SEPARATOR = ';'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Playwright
HEADLESS_MODE = False
TIMEOUT = 45000
PAUSE_BETWEEN_REQUESTS = (1, 5)


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫)
def read_file_lines_to_list(filepath: str) -> list[str]:
    """–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫, —Å–æ—Ö—Ä–∞–Ω—è—è –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫."""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            # –°—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            lines = [line.strip() for line in file if line.strip()]
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫ (—Ç—Ä—é–∫ —Å dict.fromkeys)
            return list(dict.fromkeys(lines))
    except FileNotFoundError:
        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return []


# –ò–ó–ú–ï–ù–ï–ù–ò–ï: –°—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
def read_file_lines_to_set(filepath: str) -> set[str]:
    """–ß–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏), –ø—Ä–∏–≤–æ–¥—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É."""
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            return {line.strip().lower() for line in file if line.strip()}
    except FileNotFoundError:
        print(f"–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        return set()


def load_processed_articles_from_csv(*filepaths: str) -> set[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π."""
    processed_articles = set()
    print("–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞–Ω–µ–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã...")
    for filepath in filepaths:
        if not os.path.exists(filepath):
            continue
        with open(filepath, 'r', encoding='utf-8-sig') as f:
            next(f, None)
            for line in f:
                try:
                    article = line.strip().split(CSV_SEPARATOR)[0]
                    if article:
                        processed_articles.add(article)
                except IndexError:
                    continue
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processed_articles)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤.")
    return processed_articles


def append_data_to_csv(data: list[tuple], filepath: str):
    """–î–æ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ CSV-—Ñ–∞–π–ª."""
    if not data:
        return
    output_dir = os.path.dirname(filepath)
    os.makedirs(output_dir, exist_ok=True)
    file_exists = os.path.exists(filepath)
    with open(filepath, "a", encoding="utf-8-sig", newline='') as file:
        if not file_exists:
            file.write(CSV_SEPARATOR.join(CSV_HEADERS) + '\n')
        for item in data:
            row = CSV_SEPARATOR.join(map(str, item))
            file.write(row + '\n')
    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ {filepath}")


# --- –õ–û–ì–ò–ö–ê PLAYWRIGHT ---
# (—Ñ—É–Ω–∫—Ü–∏–∏ perform_login –∏ get_articles_data_from_page –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def perform_login(page):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ."""
    print("–í—ã–ø–æ–ª–Ω—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
    try:
        page.goto(LOGIN_URL)
        page.wait_for_load_state('domcontentloaded')
        time.sleep(2)
        print('press Escape')
        page.keyboard.press("Escape")
        time.sleep(2)

        page.get_by_label("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∏–ª–∏ –ª–æ–≥–∏–Ω").fill(USER_LOGIN)
        page.get_by_label("–ü–∞—Ä–æ–ª—å").fill(USER_PASSWORD)
        page.get_by_role("button", name="–í–æ–π—Ç–∏").click()

        page.wait_for_selector("span.User__trigger:has-text('–ö–∞–±–∏–Ω–µ—Ç')", timeout=15000)
        print("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        return True
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def get_articles_data_from_page(page) -> list[tuple]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ (–∞—Ä—Ç–∏–∫—É–ª, –±—Ä–µ–Ω–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Å—Å—ã–ª–∫–∞) —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    card_selector = "li.listItem.js-productListItem"

    try:
        page.wait_for_selector(card_selector, timeout=15000)
    except TimeoutError:
        return []

    cards = page.locator(card_selector).all()
    articles_data = []

    for card in cards:
        try:
            ga_object_str = card.get_attribute("data-ga-object")
            ga_data = json.loads(ga_object_str)
            item_info = ga_data["items"][0]

            item_id = item_info.get("item_id")
            item_brand = item_info.get("item_brand", "N/A")
            item_price_str = str(item_info.get("price", "0.0")).replace(',', '.')

            link_locator = card.locator(".name a")
            item_name = link_locator.inner_text().strip().replace(CSV_SEPARATOR, ',')
            href = link_locator.get_attribute("href")

            article_id = f"goods_{item_id}"
            full_link = f"{BASE_URL}{href}"
            price = float(item_price_str)

            articles_data.append((article_id, item_brand, item_name, price, full_link))
        except (Exception,):
            continue

    return articles_data


# --- –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    start_time = datetime.datetime.now()
    print(f"üöÄ –°—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")

    # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (list) –∏ –±—Ä–µ–Ω–¥–æ–≤ (set)
    catalogs = read_file_lines_to_list(INPUT_CATALOGS_FILE)
    bad_brands = read_file_lines_to_set(INPUT_BAD_BRANDS_FILE)
    processed_articles = load_processed_articles_from_csv(OUTPUT_GOOD_FILE, OUTPUT_BAD_FILE)

    if not catalogs:
        return

    total_new_good = 0
    total_new_bad = 0

    with sync_playwright() as p:
        browser = p.chromium.launch(headless=HEADLESS_MODE)
        context = browser.new_context()
        context.set_default_timeout(TIMEOUT)
        page = context.new_page()

        if not perform_login(page):
            browser.close()
            return

        for catalog_url in tqdm(catalogs, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤"):
            page_num = 1
            print(f"\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ö–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞: {catalog_url}")

            while True:
                url = f"{catalog_url}index.php?SORT=SORT&COUNT=60&PAGEN_1={page_num}"
                print(f"  - –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}...")

                try:
                    page.goto(url, wait_until="domcontentloaded")
                    page.keyboard.press("Escape")

                    if page.locator("text=–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã").count() > 0:
                        print("  -> –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∫–∞—Ç–∞–ª–æ–≥–∞.")
                        break

                    found_data = get_articles_data_from_page(page)

                    if not found_data:
                        print("  -> –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–æ–Ω–µ—Ü –∫–∞—Ç–∞–ª–æ–≥–∞.")
                        break

                    newly_found_good, newly_found_bad = [], []
                    for item_data in found_data:
                        article_id = item_data[0]
                        if article_id not in processed_articles:
                            processed_articles.add(article_id)
                            brand_normalized = item_data[1].strip().lower()

                            if brand_normalized in bad_brands:
                                newly_found_bad.append(item_data)
                            else:
                                newly_found_good.append(item_data)

                    append_data_to_csv(newly_found_good, OUTPUT_GOOD_FILE)
                    append_data_to_csv(newly_found_bad, OUTPUT_BAD_FILE)
                    total_new_good += len(newly_found_good)
                    total_new_bad += len(newly_found_bad)

                    page_num += 1
                    time.sleep(random.uniform(*PAUSE_BETWEEN_REQUESTS))

                except Exception as e:
                    print(f"  -> –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}. –ü—Ä–µ—Ä—ã–≤–∞—é –æ–±—Ö–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞.")
                    break
        browser.close()

    end_time = datetime.datetime.now()
    print("-" * 50)
    print(f"üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üïí –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time}")
    print(f"üëç –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö '—Ö–æ—Ä–æ—à–∏—Ö' —Ç–æ–≤–∞—Ä–æ–≤: {total_new_good}")
    print(f"üëé –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö '–Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö' —Ç–æ–≤–∞—Ä–æ–≤: {total_new_bad}")
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {os.path.abspath('out')}")
    print("-" * 50)


if __name__ == '__main__':
    main()
